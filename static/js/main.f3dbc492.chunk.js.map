{"version":3,"sources":["constants/sort.js","store/AppContext.jsx","components/TaskItem/TaskItem.jsx","components/TasksList/TasksList.jsx","components/TaskForm/TaskForm.jsx","services/getTasks.js","components/TasksSorter/TasksSorter.jsx","screens/TasksScreen.jsx","App.jsx","index.js"],"names":["SORT_TYPE_ASC","SORT_TYPE_DESC","sortLabels","AppContext","React","createContext","AppContextWrapper","children","useState","tasks","setTasks","state","setTaskStatus","id","status","tasksUpdated","map","task","completed","deleteTask","filter","saveTask","updateTask","title","sortTasks","sortType","tasksCopy","sort","a","b","Provider","value","displayName","TaskItem","useContext","isUpdating","setIsUpdating","text","setText","handleUpdate","Card","className","onDoubleClick","Checkbox","checked","onChange","event","target","TextField","label","onKeyDown","String","key","toLowerCase","length","IconButton","color","onClick","disabled","TasksList","TaskForm","onSubmit","uuidv1","preventDefault","selected","userId","required","e","Button","type","startIcon","getTasks","axios","get","response","data","slice","TasksSorter","setSortType","useEffect","Select","native","sortLabel","TasksScreen","loadTasks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3dbc492.chunk.js","sourcesContent":["export const SORT_TYPE_ASC = \"Ascendente\";\r\nexport const SORT_TYPE_DESC = \"Descendente\";\r\nexport const sortLabels = [SORT_TYPE_ASC, SORT_TYPE_DESC];\r\n","import React, { useState } from \"react\";\r\nimport { SORT_TYPE_ASC, SORT_TYPE_DESC } from \"../constants/sort\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport const AppContextWrapper = ({ children }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const setTaskStatus = (id, status) => {\r\n    const tasksUpdated = tasks.map((task) => {\r\n      if (task.id === id) {\r\n        return {\r\n          ...task,\r\n          completed: status,\r\n        };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(tasksUpdated);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const tasksUpdated = tasks.filter((task) => task.id !== id);\r\n    setTasks(tasksUpdated);\r\n  };\r\n\r\n  const updateTask = (id, title) => {\r\n    const tasksUpdated = tasks.map((task) => {\r\n      if (task.id === id) {\r\n        return {\r\n          ...task,\r\n          title,\r\n        };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(tasksUpdated);\r\n  };\r\n\r\n  const saveTask = (task) => {\r\n    const tasksUpdated = [...tasks, task];\r\n    setTasks(tasksUpdated);\r\n  };\r\n\r\n  const sortTasks = (sortType) => {\r\n    const tasksCopy = tasks.map((task) => task);\r\n    if (sortType === SORT_TYPE_ASC) {\r\n      tasksCopy.sort((a, b) => (a.title > b.title ? 1 : -1));\r\n    } else if (sortType === SORT_TYPE_DESC) {\r\n      tasksCopy.sort((a, b) => (a.title < b.title ? 1 : -1));\r\n    }\r\n    setTasks(tasksCopy);\r\n  };\r\n\r\n  const state = {\r\n    tasks,\r\n    setTasks,\r\n    setTaskStatus,\r\n    deleteTask,\r\n    saveTask,\r\n    updateTask,\r\n    sortTasks,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={state} displayName=\"AppContext\">\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppContext;\r\n","import React, { useContext, useState } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport \"./TaskItem.scss\";\r\nimport AppContext from \"../../store/AppContext\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpdateIcon from \"@material-ui/icons/Update\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst TaskItem = ({ id, title, completed }) => {\r\n  const state = useContext(AppContext);\r\n\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [text, setText] = useState(title);\r\n\r\n  const handleCheck = (event) => {\r\n    state.setTaskStatus(id, event.target.checked);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    state.deleteTask(id);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setIsUpdating(false);\r\n    state.updateTask(id, text);\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (String(event.key).toLowerCase() === \"enter\" && text.length) {\r\n      handleUpdate();\r\n    }\r\n  };\r\n\r\n  const handleDoubleClick = () => {\r\n    setIsUpdating(true);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"taskItem\" onDoubleClick={handleDoubleClick}>\r\n      <div className=\"taskItem__checkbox\">\r\n        <Checkbox checked={completed} onChange={handleCheck} />\r\n      </div>\r\n      <div className=\"taskItem__title\">\r\n        {isUpdating ? (\r\n          <TextField\r\n            className=\"taskItem__input\"\r\n            label=\"Tarea...\"\r\n            value={text}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n        ) : (\r\n          <p>{text}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"taskItem__buttons\">\r\n        {isUpdating ? (\r\n          <IconButton\r\n            color=\"primary\"\r\n            onClick={handleUpdate}\r\n            disabled={!text.length}\r\n          >\r\n            <SaveIcon />\r\n          </IconButton>\r\n        ) : (\r\n          <IconButton color=\"primary\" onClick={() => setIsUpdating(true)}>\r\n            <UpdateIcon />\r\n          </IconButton>\r\n        )}\r\n\r\n        <IconButton color=\"secondary\" onClick={handleDelete}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskItem;\r\n","import React, { useContext } from \"react\";\nimport AppContext from \"../../store/AppContext\";\nimport TaskItem from \"../TaskItem/TaskItem\";\nimport \"./TasksList.scss\";\n\nconst TasksList = () => {\n  const state = useContext(AppContext);\n\n  return (\n    <div className=\"TasksList\">\n      {state.tasks.map((task) => (\n        <TaskItem\n          key={task.id}\n          id={task.id}\n          title={task.title}\n          completed={task.completed}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TasksList;\n","import React, { useContext, useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./TaskForm.scss\";\r\nimport AppContext from \"../../store/AppContext\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\n\r\nconst TaskForm = () => {\r\n  const state = useContext(AppContext);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleSave = (event) => {\r\n    const id = uuidv1();\r\n    event.preventDefault();\r\n    const task = { id: id, title: text, selected: false, userId: id };\r\n    state.saveTask(task);\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"taskForm\" onSubmit={handleSave}>\r\n      <TextField\r\n        className=\"taskForm__input\"\r\n        required\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        id=\"taskForm__input\"\r\n        label=\"Agrega un titulo a la tarea\"\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        color=\"primary\"\r\n        startIcon={<SaveIcon />}\r\n        disabled={!text.length}\r\n      >\r\n        Guardar\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import axios from \"axios\";\r\n\r\nconst getTasks = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/todos\"\r\n    );\r\n    const tasks = response.data.slice(0, 5);\r\n    return tasks;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport default getTasks;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport \"./TasksSorter.scss\";\r\nimport AppContext from \"../../store/AppContext\";\r\nimport { sortLabels } from \"../../constants/sort\";\r\n\r\nconst TasksSorter = () => {\r\n  const state = useContext(AppContext);\r\n\r\n  const [sortType, setSortType] = useState(sortLabels[0]);\r\n\r\n  useEffect(() => {\r\n    state.sortTasks(sortType);\r\n  }, [sortType]);\r\n\r\n  return (\r\n    <div className=\"tasksSorter\">\r\n      <Select\r\n        native\r\n        value={sortType}\r\n        onChange={(event) => setSortType(event.target.value)}\r\n      >\r\n        {sortLabels.map((sortLabel) => (\r\n          <option key={sortLabel} value={sortLabel}>\r\n            {sortLabel}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksSorter;\r\n","import React, { useContext, useEffect } from \"react\";\nimport AppContext from \"../store/AppContext\";\nimport TasksList from \"../components/TasksList/TasksList\";\nimport \"./TasksScreen.scss\";\nimport TaskForm from \"../components/TaskForm/TaskForm\";\nimport getTasks from \"../services/getTasks\";\nimport TasksSorter from \"../components/TasksSorter/TasksSorter\";\n\nconst TasksScreen = () => {\n  const state = useContext(AppContext);\n\n  const loadTasks = async () => {\n    const tasks = await getTasks();\n    state.setTasks(tasks);\n  };\n\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  return (\n    <div className=\"tasksScreen\">\n      <TaskForm />\n      <TasksSorter />\n      <TasksList />\n    </div>\n  );\n};\n\nexport default TasksScreen;\n","import React from \"react\";\nimport { AppContextWrapper } from \"./store/AppContext\";\nimport TasksScreen from \"./screens/TasksScreen\";\n\nconst App = () => {\n  return (\n    <AppContextWrapper>\n      <TasksScreen />\n    </AppContextWrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}